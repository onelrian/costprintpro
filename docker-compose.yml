# Main docker-compose file for CostPrint Pro
# This file provides the default development setup
# For production, use: docker-compose -f deploy/docker/docker-compose.production.yml

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: costprint-postgres
    environment:
      POSTGRES_DB: costprint
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: costprint-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  backend:
    image: ghcr.io/onelrian/costprintpro-backend:latest
    container_name: costprint-backend
    environment:
      DATABASE_URL: postgresql://postgres:password@db:5432/costprint
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production-environment}
      PORT: 8080
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000,http://127.0.0.1:3000
      RUST_LOG: info
      BIND_ADDRESS: 0.0.0.0:8080
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    image: ghcr.io/onelrian/costprintpro-frontend:latest
    container_name: costprint-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8080
      NEXT_PUBLIC_API_URL_EXTERNAL: http://localhost:8080
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
